{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skuma573\\\\Desktop\\\\SampleProjects\\\\Quiz\\\\checklist-2\\\\src\\\\Admin\\\\questionComponent.jsx\";\nimport React, { Component } from \"react\";\nimport Card from \"../common/card/card\";\nimport Joi from \"joi-browser\";\nimport Form from \"../common/form\";\nimport Option from \"./optionsComponent\";\nimport Button from \"../common/button/button\";\n\nclass QuestionComponent extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        question: \"\"\n      },\n      errors: {},\n      optionComponentArray: []\n    };\n    this.schema = {\n      question: Joi.string().required()\n    };\n\n    this.onAddOption = () => {\n      let optionComponentCopyArray = [...this.state.optionComponentArray];\n      optionComponentCopyArray.push(React.createElement(Option, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }));\n      this.setState({\n        optionComponentArray: optionComponentCopyArray\n      });\n    };\n  }\n\n  // when iterating the opinionComponentArray, iterate each component, beside the component, render a\n  // button that accepts index of the component.\n  // Delete the array based on the index of the component.\n  render() {\n    const optionComponentArray = this.state.optionComponentArray;\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.renderInput(\"question\", \"fa fa-quora\", \"Question\"), optionComponentArray, React.createElement(Button, {\n      onClick: this.onAddOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default QuestionComponent;","map":{"version":3,"sources":["C:\\Users\\skuma573\\Desktop\\SampleProjects\\Quiz\\checklist-2\\src\\Admin\\questionComponent.jsx"],"names":["React","Component","Card","Joi","Form","Option","Button","QuestionComponent","state","data","question","errors","optionComponentArray","schema","string","required","onAddOption","optionComponentCopyArray","push","setState","render","renderInput"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,iBAAN,SAAgCH,IAAhC,CAAqC;AAAA;AAAA;AAAA,SACnCI,KADmC,GAC3B;AACNC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OADA;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,oBAAoB,EAAE;AAHhB,KAD2B;AAAA,SAOnCC,MAPmC,GAO1B;AACPH,MAAAA,QAAQ,EAAEP,GAAG,CAACW,MAAJ,GAAaC,QAAb;AADH,KAP0B;;AAAA,SAWnCC,WAXmC,GAWrB,MAAM;AAClB,UAAIC,wBAAwB,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWI,oBAAf,CAA/B;AACAK,MAAAA,wBAAwB,CAACC,IAAzB,CAA8B,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA9B;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,oBAAoB,EAAEK;AAAxB,OAAd;AACD,KAfkC;AAAA;;AAiBnC;AACA;AACA;AACAG,EAAAA,MAAM,GAAG;AAAA,UACAR,oBADA,GACwB,KAAKJ,KAD7B,CACAI,oBADA;AAEP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKS,WAAL,CAAiB,UAAjB,EAA6B,aAA7B,EAA4C,UAA5C,CADH,EAEGT,oBAFH,EAGE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,KAAKI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AA7BkC;;AAgCrC,eAAeT,iBAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"../common/card/card\";\r\nimport Joi from \"joi-browser\";\r\nimport Form from \"../common/form\";\r\nimport Option from \"./optionsComponent\";\r\nimport Button from \"../common/button/button\";\r\n\r\nclass QuestionComponent extends Form {\r\n  state = {\r\n    data: { question: \"\" },\r\n    errors: {},\r\n    optionComponentArray: []\r\n  };\r\n\r\n  schema = {\r\n    question: Joi.string().required()\r\n  };\r\n\r\n  onAddOption = () => {\r\n    let optionComponentCopyArray = [...this.state.optionComponentArray];\r\n    optionComponentCopyArray.push(<Option />);\r\n    this.setState({ optionComponentArray: optionComponentCopyArray  });\r\n  };\r\n\r\n  // when iterating the opinionComponentArray, iterate each component, beside the component, render a\r\n  // button that accepts index of the component.\r\n  // Delete the array based on the index of the component.\r\n  render() {\r\n    const {optionComponentArray} = this.state;\r\n    return (\r\n      <Card>\r\n        {this.renderInput(\"question\", \"fa fa-quora\", \"Question\")}\r\n        {optionComponentArray}\r\n        <Button onClick = {this.onAddOption}/>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionComponent;\r\n"]},"metadata":{},"sourceType":"module"}