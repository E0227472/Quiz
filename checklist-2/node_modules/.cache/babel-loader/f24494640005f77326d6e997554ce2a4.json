{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\skuma573\\\\Desktop\\\\SampleProjects\\\\Quiz\\\\checklist-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\skuma573\\\\Desktop\\\\SampleProjects\\\\Quiz\\\\checklist-2\\\\src\\\\common\\\\form.jsx\";\nimport React, { Component } from \"react\";\nimport Joi from \"joi-browser\";\nimport Input from \"./input/input\";\nimport OptionsInput from \"./optionsInput/optionsInput\";\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      errors: {},\n      optionArraySize: 1\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // => preventDefault() prevents the default behaviour in this case the loading of the page\n\n      const errors = this.validate(); // => getting the errors from validate method, which returns errors\n\n      this.setState({\n        errors: errors || {}\n      });\n      if (errors) return; // => if the errors present, do not call the server, otherwise call server.\n      // return keyword is used to exit from method.\n\n      this.doSubmit();\n    };\n\n    this.handleChange = e => {\n      // const errors = { ...this.state.errors };\n      // const errorMessage = this.validateProperty(e.currentTarget);\n      // if (errorMessage) errors[e.currentTarget.name] = errorMessage;\n      // else delete errors[e.currentTarget.name]; // delete keyword removes the property and its value\n      const data = _objectSpread({}, this.state.data); // get a copy of the data object from state\n\n\n      data[e.currentTarget.name] = e.currentTarget.value; // get the username that has been typed in textbox\n\n      this.setState({\n        data\n      }); // set the state to the new value\n\n      console.log(e.currentTarget.value);\n    };\n  }\n\n  // method returns button jsx syntax\n  renderButton(label) {\n    return React.createElement(\"button\", {\n      disabled: this.validate(),\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, label);\n  } // method returns input field\n\n\n  renderInput(name, iconClassName, placeholder, type = \"text\") {\n    const _this$state = this.state,\n          data = _this$state.data,\n          errors = _this$state.errors;\n    return React.createElement(Input, {\n      iconClassName: iconClassName,\n      placeholder: placeholder,\n      type: type,\n      name: name,\n      value: data[name],\n      onChange: this.handleChange,\n      error: errors[name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  } // method returns input field\n\n\n  renderOptionsInput(name, iconClassName, placeholder, handleOptionChange, type = \"text\") {\n    const _this$state2 = this.state,\n          data = _this$state2.data,\n          errors = _this$state2.errors;\n    return React.createElement(OptionsInput, {\n      iconClassName: iconClassName,\n      placeholder: placeholder,\n      type: type,\n      name: name,\n      value: data[name],\n      onChange: handleOptionChange,\n      error: errors[name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:\\Users\\skuma573\\Desktop\\SampleProjects\\Quiz\\checklist-2\\src\\common\\form.jsx"],"names":["React","Component","Joi","Input","OptionsInput","Form","state","data","errors","optionArraySize","handleSubmit","e","preventDefault","validate","setState","doSubmit","handleChange","currentTarget","name","value","console","log","renderButton","label","renderInput","iconClassName","placeholder","type","renderOptionsInput","handleOptionChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Input from \"./input/input\";\r\nimport OptionsInput from \"./optionsInput/optionsInput\";\r\nclass Form extends Component {\r\n  state = {\r\n    data: {},\r\n    errors: {},\r\n    optionArraySize: 1\r\n  };\r\n\r\n  // method validates only one property on change.\r\n  // When text entered and deleted, the error message pops up.\r\n  // validateProperty = ({ name, value }) => {\r\n  //   const obj = { [name]: value }; // obj should contain only one property that is being validated\r\n  //   const schema = { [name]: this.schema[name] }; // schema should only have one property that is being validated\r\n  //   const { error } = Joi.validate(obj, schema);\r\n  //   return error ? \"Please enter a valid input\" : null;\r\n  // };\r\n\r\n  // // this method validates the entire form\r\n  // validate = () => {\r\n  //   // mapping data to schema object where the properties are matched\r\n  //   const options = { abortEarly: false };\r\n  //   const { error } = Joi.validate(this.state.data, this.schema, options);\r\n  //   console.log(error);\r\n  //   if (!error) return null;\r\n\r\n  //   const errors = { ...this.state.errors };\r\n  //   for (let item of error.details) // iterate over the details array\r\n  //     errors[item.path[0]] = item.message;\r\n\r\n  //   return errors;\r\n  // };\r\n  // when form submitted, method checks for errors before form submission\r\n  handleSubmit = e => {\r\n    e.preventDefault(); // => preventDefault() prevents the default behaviour in this case the loading of the page\r\n    const errors = this.validate(); // => getting the errors from validate method, which returns errors\r\n    this.setState({ errors: errors || {} });\r\n    if (errors) return; // => if the errors present, do not call the server, otherwise call server.\r\n    // return keyword is used to exit from method.\r\n\r\n    this.doSubmit();\r\n  };\r\n  // when user enters input, input captured in state.\r\n  handleChange = e => {\r\n    // const errors = { ...this.state.errors };\r\n    // const errorMessage = this.validateProperty(e.currentTarget);\r\n    // if (errorMessage) errors[e.currentTarget.name] = errorMessage;\r\n    // else delete errors[e.currentTarget.name]; // delete keyword removes the property and its value\r\n    const data = { ...this.state.data }; // get a copy of the data object from state\r\n    data[e.currentTarget.name] = e.currentTarget.value; // get the username that has been typed in textbox\r\n    this.setState({ data }); // set the state to the new value\r\n    console.log(e.currentTarget.value);\r\n  };\r\n\r\n  \r\n\r\n  // method returns button jsx syntax\r\n  renderButton(label) {\r\n    return (\r\n      <button disabled={this.validate()} className=\"btn btn-primary\">\r\n        {label}\r\n      </button>\r\n    );\r\n  }\r\n  // method returns input field\r\n  renderInput(name, iconClassName, placeholder, type = \"text\") {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Input\r\n        iconClassName={iconClassName}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  }\r\n\r\n  // method returns input field\r\n  renderOptionsInput(name, iconClassName, placeholder, handleOptionChange, type = \"text\") {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <OptionsInput\r\n        iconClassName={iconClassName}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        onChange={handleOptionChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}