{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\skuma573\\\\Desktop\\\\SampleProjects\\\\Quiz\\\\checklist-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\skuma573\\\\Desktop\\\\SampleProjects\\\\Quiz\\\\checklist-2\\\\src\\\\common\\\\form.jsx\";\nimport React, { Component } from \"react\";\nimport Joi from \"joi-browser\";\nimport Input from \"./input/input\";\nimport OptionsInput from \"./optionsInput/optionsInput\";\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      errors: {}\n    };\n\n    this.validateProperty = ({\n      name,\n      value\n    }) => {\n      const obj = {\n        [name]: value\n      }; // obj should contain only one property that is being validated\n\n      const schema = {\n        [name]: this.schema[name]\n      }; // schema should only have one property that is being validated\n\n      const _Joi$validate = Joi.validate(obj, schema),\n            error = _Joi$validate.error;\n\n      return error ? \"Please enter a valid input\" : null;\n    };\n\n    this.validate = () => {\n      // mapping data to schema object where the properties are matched\n      const options = {\n        abortEarly: false\n      };\n\n      const _Joi$validate2 = Joi.validate(this.state.data, this.schema, options),\n            error = _Joi$validate2.error;\n\n      console.log(error);\n      if (!error) return null;\n\n      const errors = _objectSpread({}, this.state.errors);\n\n      for (let item of error.details) // iterate over the details array\n      errors[item.path[0]] = item.message;\n\n      return errors;\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // => preventDefault() prevents the default behaviour in this case the loading of the page\n\n      const errors = this.validate(); // => getting the errors from validate method, which returns errors\n\n      this.setState({\n        errors: errors || {}\n      });\n      if (errors) return; // => if the errors present, do not call the server, otherwise call server.\n      // return keyword is used to exit from method.\n\n      this.doSubmit();\n    };\n\n    this.handleChange = e => {\n      const errors = _objectSpread({}, this.state.errors);\n\n      const errorMessage = this.validateProperty(e.currentTarget);\n      if (errorMessage) errors[e.currentTarget.name] = errorMessage;else delete errors[e.currentTarget.name]; // delete keyword removes the property and its value\n\n      const data = _objectSpread({}, this.state.data); // get a copy of the data object from state\n\n\n      data[e.currentTarget.name] = e.currentTarget.value; // get the username that has been typed in textbox\n\n      this.setState({\n        data,\n        errors\n      }); // set the state to the new value\n    };\n  }\n\n  // method returns button jsx syntax\n  renderButton(label) {\n    return React.createElement(\"button\", {\n      disabled: this.validate(),\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, label);\n  } // method returns input field\n\n\n  renderInput(name, iconClassName, placeholder, type = \"text\") {\n    const _this$state = this.state,\n          data = _this$state.data,\n          errors = _this$state.errors;\n    return React.createElement(Input, {\n      iconClassName: iconClassName,\n      placeholder: placeholder,\n      type: type,\n      name: name,\n      value: data[name],\n      onChange: this.handleChange,\n      error: errors[name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  } // method returns input field\n\n\n  renderOptionsInput(name, iconClassName, placeholder, type = \"text\") {\n    const _this$state2 = this.state,\n          data = _this$state2.data,\n          errors = _this$state2.errors;\n    return React.createElement(OptionsInput, {\n      iconClassName: iconClassName,\n      placeholder: placeholder,\n      type: type,\n      name: name,\n      value: data[name],\n      onChange: this.handleChange,\n      error: errors[name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["C:\\Users\\skuma573\\Desktop\\SampleProjects\\Quiz\\checklist-2\\src\\common\\form.jsx"],"names":["React","Component","Joi","Input","OptionsInput","Form","state","data","errors","validateProperty","name","value","obj","schema","validate","error","options","abortEarly","console","log","item","details","path","message","handleSubmit","e","preventDefault","setState","doSubmit","handleChange","errorMessage","currentTarget","renderButton","label","renderInput","iconClassName","placeholder","type","renderOptionsInput"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Input from \"./input/input\";\r\nimport OptionsInput from \"./optionsInput/optionsInput\";\r\nclass Form extends Component {\r\n  state = {\r\n    data: {},\r\n    errors: {},\r\n  };\r\n\r\n  // method validates only one property on change.\r\n  // When text entered and deleted, the error message pops up.\r\n  validateProperty = ({ name, value }) => {\r\n    const obj = { [name]: value }; // obj should contain only one property that is being validated\r\n    const schema = { [name]: this.schema[name] }; // schema should only have one property that is being validated\r\n    const { error } = Joi.validate(obj, schema);\r\n    return error ? \"Please enter a valid input\" : null;\r\n  };\r\n\r\n  // this method validates the entire form\r\n  validate = () => {\r\n    // mapping data to schema object where the properties are matched\r\n    const options = { abortEarly: false };\r\n    const { error } = Joi.validate(this.state.data, this.schema, options);\r\n    console.log(error);\r\n    if (!error) return null;\r\n\r\n    const errors = { ...this.state.errors };\r\n    for (let item of error.details) // iterate over the details array\r\n      errors[item.path[0]] = item.message;\r\n\r\n    return errors;\r\n  };\r\n  // when form submitted, method checks for errors before form submission\r\n  handleSubmit = e => {\r\n    e.preventDefault(); // => preventDefault() prevents the default behaviour in this case the loading of the page\r\n    const errors = this.validate(); // => getting the errors from validate method, which returns errors\r\n    this.setState({ errors: errors || {} });\r\n    if (errors) return; // => if the errors present, do not call the server, otherwise call server.\r\n    // return keyword is used to exit from method.\r\n\r\n    this.doSubmit();\r\n  };\r\n  // when user enters input, input captured in state.\r\n  handleChange = e => {\r\n    const errors = { ...this.state.errors };\r\n    const errorMessage = this.validateProperty(e.currentTarget);\r\n    if (errorMessage) errors[e.currentTarget.name] = errorMessage;\r\n    else delete errors[e.currentTarget.name]; // delete keyword removes the property and its value\r\n    const data = { ...this.state.data }; // get a copy of the data object from state\r\n    data[e.currentTarget.name] = e.currentTarget.value; // get the username that has been typed in textbox\r\n    this.setState({ data, errors }); // set the state to the new value\r\n  };\r\n  \r\n\r\n  // method returns button jsx syntax\r\n  renderButton(label) {\r\n    return (\r\n      <button disabled={this.validate()} className=\"btn btn-primary\">\r\n        {label}\r\n      </button>\r\n    );\r\n  }\r\n  // method returns input field\r\n  renderInput(name, iconClassName, placeholder, type = \"text\") {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Input\r\n        iconClassName={iconClassName}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  }\r\n\r\n  // method returns input field\r\n  renderOptionsInput(name, iconClassName, placeholder, type = \"text\") {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <OptionsInput\r\n        iconClassName={iconClassName}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}/>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}